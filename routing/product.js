// üì¶ Zaimportuj modu≈Çy 'fs' oraz 'STATUS_CODE' do obs≈Çugi produkt√≥w.
// üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–æ–¥—É–ª–∏ 'fs' –∏ 'STATUS_CODE' –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.
const fs = require("fs");
const { STATUS_CODE } = require("../constants/statusCode");

// üèó Stw√≥rz funkcjƒô 'productRouting', kt√≥ra obs≈Çu≈ºy ≈ºƒÖdania dotyczƒÖce produkt√≥w.
// üèó –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é 'productRouting' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä—ã.
const productRouting = (request, response) => {
  if (request.url === "/product/add" && request.method === "GET") {
    renderAddProductPage(response);
  } else if (request.url === "/product/new" && request.method === "GET") {
    renderNewProductPage(response);
  } else if (request.url === "/product/add" && request.method === "POST") {
    addNewProduct(request, response);
  } else {
    response.statusCode = STATUS_CODE.NOT_FOUND;
    response.end(STATUS_CODE.NOT_FOUND);
  }
};

// üèó Stw√≥rz funkcjƒô 'renderAddProductPage', kt√≥ra wyrenderuje stronƒô dodawania produktu.
// üèó –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é 'renderAddProductPage', –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.
const renderAddProductPage = (response) => {
  response.setHeader("Content-Type", "text/html");
  response.end(
    '<form action="/product/add" method="POST"><input type="text" name="productName"><button type="submit">Add Product</button></form>'
  );
};

// üèó Stw√≥rz funkcjƒô 'renderNewProductPage', kt√≥ra wy≈õwietli najnowszy produkt z pliku 'product.txt'.
// Podpowied≈∫: fileSystem.readFile(...);
// üèó –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é 'renderNewProductPage' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ 'product.txt'.
// –ü–æ–¥—Å–∫–∞–∑–∫–∞: fileSystem.readFile(...);
const renderNewProductPage = (response) => {
  fs.readFile("product.txt", "utf8", (err, data) => {
    if (err) {
      response.statusCode = 500;
      response.end(STATUS_CODE[500]);
      return;
    }
    response.setHeader("Content-Type", "text/html");
    response.end(`<h1>New Product: ${data}</h1>`);
  });
};

// üèó Stw√≥z funkcjƒô 'addNewProduct', kt√≥ra obs≈Çu≈ºy dodawanie nowego produktu, zapisywanie go do pliku 'product.txt' oraz przeniesie u≈ºytkownika na stronƒô '/product/new'.
// Podpowied≈∫: fileSystem.writeFile(...);
// Podpowied≈∫: response.setHeader("Location", "/product/new");
// üèó –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é 'addNewProduct' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–≥–æ –≤ —Ñ–∞–π–ª 'product.txt' –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '/product/new'.
// –ü–æ–¥—Å–∫–∞–∑–∫–∞: fileSystem.writeFile(...);
// –ü–æ–¥—Å–∫–∞–∑–∫–∞: response.setHeader('Location', '/product/new');
const addNewProduct = (request, response) => {
  let body = "";
  request.on("data", (chunk) => {
    body += chunk.toString();
  });
  request.on("end", () => {
    const productName = new URLSearchParams(body).get("productName");
    fs.writeFile("product.txt", productName, (err) => {
      if (err) {
        response.statusCode = 500;
        response.end(STATUS_CODE[500]);
        return;
      }
      response.statusCode = STATUS_CODE.FOUND;
      response.setHeader("Location", "/product/new");
      response.end();
    });
  });
};

// üîß Wyeksportuj funkcjƒô 'productRouting', aby inne modu≈Ç mog≈Çy jej u≈ºywaƒá.
// üîß –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é 'productRouting', —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏ –º–æ–≥–ª–∏ –µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
module.exports = { productRouting };
